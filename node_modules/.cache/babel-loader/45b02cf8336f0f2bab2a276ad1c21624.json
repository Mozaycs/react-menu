{"ast":null,"code":"'use strict';\n\nvar _jsxFileName = \"/Users/parhamjf/Desktop/NewProjects/NewNew/my-app/src/MenuApp.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport baseStyles from './baseStyles';\nimport BurgerIcon from './BurgerIcon';\nimport CrossIcon from './CrossIcon';\nexport default (styles => {\n  class Menu extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        isOpen: false\n      };\n\n      if (!styles) {\n        throw new Error('No styles supplied');\n      }\n    }\n\n    toggleMenu(options = {}) {\n      const {\n        isOpen,\n        noStateChange\n      } = options;\n      const newState = {\n        isOpen: typeof isOpen !== 'undefined' ? isOpen : !this.state.isOpen\n      };\n      this.applyWrapperStyles();\n      this.setState(newState, () => {\n        !noStateChange && this.props.onStateChange(newState);\n\n        if (!this.props.disableAutoFocus) {\n          // For accessibility reasons, ensures that when we toggle open,\n          // we focus the first menu item if one exists.\n          if (newState.isOpen) {\n            const firstItem = document.querySelector('.bm-item');\n\n            if (firstItem) {\n              firstItem.focus();\n            }\n          } else {\n            if (document.activeElement) {\n              document.activeElement.blur();\n            } else {\n              document.body.blur(); // Needed for IE\n            }\n          }\n        } // Timeout ensures wrappers are cleared after animation finishes.\n\n\n        this.timeoutId && clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(() => {\n          this.timeoutId = null;\n\n          if (!newState.isOpen) {\n            this.applyWrapperStyles(false);\n          }\n        }, 500);\n      });\n    } // Applies component-specific styles to external wrapper elements.\n\n\n    applyWrapperStyles(set = true) {\n      const applyClass = (el, className) => el.classList[set ? 'add' : 'remove'](className);\n\n      if (this.props.htmlClassName) {\n        applyClass(document.querySelector('html'), this.props.htmlClassName);\n      }\n\n      if (this.props.bodyClassName) {\n        applyClass(document.querySelector('body'), this.props.bodyClassName);\n      }\n\n      if (styles.pageWrap && this.props.pageWrapId) {\n        this.handleExternalWrapper(this.props.pageWrapId, styles.pageWrap, set);\n      }\n\n      if (styles.outerContainer && this.props.outerContainerId) {\n        this.handleExternalWrapper(this.props.outerContainerId, styles.outerContainer, set);\n      }\n    } // Sets or unsets styles on DOM elements outside the menu component.\n    // This is necessary for correct page interaction with some of the menus.\n    // Throws and returns if the required external elements don't exist,\n    // which means any external page animations won't be applied.\n\n\n    handleExternalWrapper(id, wrapperStyles, set) {\n      const wrapper = document.getElementById(id);\n\n      if (!wrapper) {\n        console.error(\"Element with ID '\" + id + \"' not found\");\n        return;\n      }\n\n      const builtStyles = this.getStyle(wrapperStyles);\n\n      for (const prop in builtStyles) {\n        if (builtStyles.hasOwnProperty(prop)) {\n          wrapper.style[prop] = set ? builtStyles[prop] : '';\n        }\n      } // Prevent any horizontal scroll.\n      // Only set overflow-x as an inline style if htmlClassName or\n      // bodyClassName is not passed in. Otherwise, it is up to the caller to\n      // decide if they want to set the overflow style in CSS using the custom\n      // class names.\n\n\n      const applyOverflow = el => el.style['overflow-x'] = set ? 'hidden' : '';\n\n      if (!this.props.htmlClassName) {\n        applyOverflow(document.querySelector('html'));\n      }\n\n      if (!this.props.bodyClassName) {\n        applyOverflow(document.querySelector('body'));\n      }\n    } // Builds styles incrementally for a given element.\n\n\n    getStyles(el, index, inline) {\n      const propName = 'bm' + el.replace(el.charAt(0), el.charAt(0).toUpperCase()); // Set base styles.\n\n      let output = baseStyles[el] ? this.getStyle(baseStyles[el]) : {}; // Add animation-specific styles.\n\n      if (styles[el]) {\n        output = { ...output,\n          ...this.getStyle(styles[el], index + 1)\n        };\n      } // Add custom styles.\n\n\n      if (this.props.styles[propName]) {\n        output = { ...output,\n          ...this.props.styles[propName]\n        };\n      } // Add element inline styles.\n\n\n      if (inline) {\n        output = { ...output,\n          ...inline\n        };\n      } // Remove transition if required\n      // (useful if rendering open initially).\n\n\n      if (this.props.noTransition) {\n        delete output.transition;\n      }\n\n      return output;\n    }\n\n    getStyle(style, index) {\n      const {\n        width\n      } = this.props;\n      const formattedWidth = typeof width !== 'string' ? `${width}px` : width;\n      return style(this.state.isOpen, formattedWidth, this.props.right, index);\n    }\n\n    listenForClose(e) {\n      e = e || window.event; // Close on ESC, unless disabled\n\n      if (!this.props.disableCloseOnEsc && this.state.isOpen && (e.key === 'Escape' || e.keyCode === 27)) {\n        this.toggleMenu();\n      }\n    }\n\n    shouldDisableOverlayClick() {\n      if (typeof this.props.disableOverlayClick === 'function') {\n        return this.props.disableOverlayClick();\n      } else {\n        return this.props.disableOverlayClick;\n      }\n    }\n\n    componentDidMount() {\n      // Bind ESC key handler (unless custom function supplied).\n      if (this.props.customOnKeyDown) {\n        window.onkeydown = this.props.customOnKeyDown;\n      } else {\n        window.onkeydown = this.listenForClose.bind(this);\n      } // Allow initial open state to be set by props.\n\n\n      if (this.props.isOpen) {\n        this.toggleMenu({\n          isOpen: true,\n          noStateChange: true\n        });\n      }\n    }\n\n    componentWillUnmount() {\n      window.onkeydown = null;\n      this.applyWrapperStyles(false);\n    }\n\n    componentDidUpdate(prevProps) {\n      const wasToggled = typeof this.props.isOpen !== 'undefined' && this.props.isOpen !== this.state.isOpen && this.props.isOpen !== prevProps.isOpen;\n\n      if (wasToggled) {\n        this.toggleMenu(); // Toggling changes SVG animation requirements, so we defer these until the next componentDidUpdate\n\n        return;\n      }\n\n      if (styles.svg) {\n        const morphShape = ReactDOM.findDOMNode(this, 'bm-morph-shape');\n        const path = styles.svg.lib(morphShape).select('path');\n\n        if (this.state.isOpen) {\n          // Animate SVG path.\n          styles.svg.animate(path);\n        } else {\n          // Reset path (timeout ensures animation happens off screen).\n          setTimeout(() => {\n            path.attr('d', styles.svg.pathInitial);\n          }, 300);\n        }\n      }\n    }\n\n    render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 9\n        }\n      }, !this.props.noOverlay && /*#__PURE__*/React.createElement(\"div\", {\n        className: `bm-overlay ${this.props.overlayClassName}`.trim(),\n        onClick: () => !this.shouldDisableOverlayClick() && this.toggleMenu(),\n        style: this.getStyles('overlay'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        id: this.props.id,\n        className: `bm-menu-wrap ${this.props.className}`.trim(),\n        style: this.getStyles('menuWrap'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 11\n        }\n      }, styles.svg && /*#__PURE__*/React.createElement(\"div\", {\n        className: `bm-morph-shape ${this.props.morphShapeClassName}`.trim(),\n        style: this.getStyles('morphShape'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: \"0 0 100 800\",\n        preserveAspectRatio: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"path\", {\n        d: styles.svg.pathInitial,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 19\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: `bm-menu ${this.props.menuClassName}`.trim(),\n        style: this.getStyles('menu'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: `bm-item-list ${this.props.itemListClassName}`.trim(),\n        style: this.getStyles('itemList'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 15\n        }\n      }, React.Children.map(this.props.children, (item, index) => {\n        if (item) {\n          const classList = ['bm-item', this.props.itemClassName, item.props.className].filter(className => !!className).join(' ');\n          const extraProps = {\n            key: index,\n            className: classList,\n            style: this.getStyles('item', index, item.props.style),\n            tabIndex: this.state.isOpen ? 0 : -1\n          };\n          return React.cloneElement(item, extraProps);\n        }\n      }))), this.props.customCrossIcon !== false && /*#__PURE__*/React.createElement(\"div\", {\n        style: this.getStyles('closeButton'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(CrossIcon, {\n        onClick: () => this.toggleMenu(),\n        styles: this.props.styles,\n        customIcon: this.props.customCrossIcon,\n        className: this.props.crossButtonClassName,\n        crossClassName: this.props.crossClassName,\n        tabIndex: this.state.isOpen ? 0 : -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }\n      }))), this.props.customBurgerIcon !== false && /*#__PURE__*/React.createElement(\"div\", {\n        style: this.getStyles('burgerIcon'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(BurgerIcon, {\n        onClick: () => this.toggleMenu(),\n        styles: this.props.styles,\n        customIcon: this.props.customBurgerIcon,\n        className: this.props.burgerButtonClassName,\n        barClassName: this.props.burgerBarClassName,\n        onIconStateChange: this.props.onIconStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }\n      })));\n    }\n\n  }\n\n  Menu.propTypes = {\n    bodyClassName: PropTypes.string,\n    burgerBarClassName: PropTypes.string,\n    burgerButtonClassName: PropTypes.string,\n    className: PropTypes.string,\n    crossButtonClassName: PropTypes.string,\n    crossClassName: PropTypes.string,\n    customBurgerIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    customCrossIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    customOnKeyDown: PropTypes.func,\n    disableAutoFocus: PropTypes.bool,\n    disableCloseOnEsc: PropTypes.bool,\n    disableOverlayClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    htmlClassName: PropTypes.string,\n    id: PropTypes.string,\n    isOpen: PropTypes.bool,\n    itemClassName: PropTypes.string,\n    itemListClassName: PropTypes.string,\n    menuClassName: PropTypes.string,\n    morphShapeClassName: PropTypes.string,\n    noOverlay: PropTypes.bool,\n    noTransition: PropTypes.bool,\n    onStateChange: PropTypes.func,\n    outerContainerId: styles && styles.outerContainer ? PropTypes.string.isRequired : PropTypes.string,\n    overlayClassName: PropTypes.string,\n    pageWrapId: styles && styles.pageWrap ? PropTypes.string.isRequired : PropTypes.string,\n    right: PropTypes.bool,\n    styles: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    onIconHoverChange: PropTypes.func\n  };\n  Menu.defaultProps = {\n    bodyClassName: '',\n    burgerBarClassName: '',\n    burgerButtonClassName: '',\n    className: '',\n    crossButtonClassName: '',\n    crossClassName: '',\n    disableAutoFocus: false,\n    disableCloseOnEsc: false,\n    htmlClassName: '',\n    id: '',\n    itemClassName: '',\n    itemListClassName: '',\n    menuClassName: '',\n    morphShapeClassName: '',\n    noOverlay: false,\n    noTransition: false,\n    onStateChange: () => {},\n    outerContainerId: '',\n    overlayClassName: '',\n    pageWrapId: '',\n    styles: {},\n    width: 300,\n    onIconHoverChange: () => {}\n  };\n  return Menu;\n});","map":{"version":3,"sources":["/Users/parhamjf/Desktop/NewProjects/NewNew/my-app/src/MenuApp.jsx"],"names":["React","Component","ReactDOM","PropTypes","baseStyles","BurgerIcon","CrossIcon","styles","Menu","constructor","props","state","isOpen","Error","toggleMenu","options","noStateChange","newState","applyWrapperStyles","setState","onStateChange","disableAutoFocus","firstItem","document","querySelector","focus","activeElement","blur","body","timeoutId","clearTimeout","setTimeout","set","applyClass","el","className","classList","htmlClassName","bodyClassName","pageWrap","pageWrapId","handleExternalWrapper","outerContainer","outerContainerId","id","wrapperStyles","wrapper","getElementById","console","error","builtStyles","getStyle","prop","hasOwnProperty","style","applyOverflow","getStyles","index","inline","propName","replace","charAt","toUpperCase","output","noTransition","transition","width","formattedWidth","right","listenForClose","e","window","event","disableCloseOnEsc","key","keyCode","shouldDisableOverlayClick","disableOverlayClick","componentDidMount","customOnKeyDown","onkeydown","bind","componentWillUnmount","componentDidUpdate","prevProps","wasToggled","svg","morphShape","findDOMNode","path","lib","select","animate","attr","pathInitial","render","noOverlay","overlayClassName","trim","morphShapeClassName","menuClassName","itemListClassName","Children","map","children","item","itemClassName","filter","join","extraProps","tabIndex","cloneElement","customCrossIcon","crossButtonClassName","crossClassName","customBurgerIcon","burgerButtonClassName","burgerBarClassName","onIconStateChange","propTypes","string","oneOfType","element","oneOf","func","bool","isRequired","object","number","onIconHoverChange","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport baseStyles from './baseStyles';\nimport BurgerIcon from './BurgerIcon';\nimport CrossIcon from './CrossIcon';\n\nexport default styles => {\n  class Menu extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        isOpen: false\n      };\n\n      if (!styles) {\n        throw new Error('No styles supplied');\n      }\n    }\n\n    toggleMenu(options = {}) {\n      const { isOpen, noStateChange } = options;\n      const newState = {\n        isOpen: typeof isOpen !== 'undefined' ? isOpen : !this.state.isOpen\n      };\n\n      this.applyWrapperStyles();\n\n      this.setState(newState, () => {\n        !noStateChange && this.props.onStateChange(newState);\n\n        if (!this.props.disableAutoFocus) {\n          // For accessibility reasons, ensures that when we toggle open,\n          // we focus the first menu item if one exists.\n          if (newState.isOpen) {\n            const firstItem = document.querySelector('.bm-item');\n            if (firstItem) {\n              firstItem.focus();\n            }\n          } else {\n            if (document.activeElement) {\n              document.activeElement.blur();\n            } else {\n              document.body.blur(); // Needed for IE\n            }\n          }\n        }\n\n        // Timeout ensures wrappers are cleared after animation finishes.\n        this.timeoutId && clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(() => {\n          this.timeoutId = null;\n          if (!newState.isOpen) {\n            this.applyWrapperStyles(false);\n          }\n        }, 500);\n      });\n    }\n\n    // Applies component-specific styles to external wrapper elements.\n    applyWrapperStyles(set = true) {\n      const applyClass = (el, className) => el.classList[set ? 'add' : 'remove'](className);\n\n      if (this.props.htmlClassName) {\n        applyClass(document.querySelector('html'), this.props.htmlClassName);\n      }\n      if (this.props.bodyClassName) {\n        applyClass(document.querySelector('body'), this.props.bodyClassName);\n      }\n\n      if (styles.pageWrap && this.props.pageWrapId) {\n        this.handleExternalWrapper(this.props.pageWrapId, styles.pageWrap, set);\n      }\n\n      if (styles.outerContainer && this.props.outerContainerId) {\n        this.handleExternalWrapper(this.props.outerContainerId, styles.outerContainer, set);\n      }\n    }\n\n    // Sets or unsets styles on DOM elements outside the menu component.\n    // This is necessary for correct page interaction with some of the menus.\n    // Throws and returns if the required external elements don't exist,\n    // which means any external page animations won't be applied.\n    handleExternalWrapper(id, wrapperStyles, set) {\n      const wrapper = document.getElementById(id);\n\n      if (!wrapper) {\n        console.error(\"Element with ID '\" + id + \"' not found\");\n        return;\n      }\n\n      const builtStyles = this.getStyle(wrapperStyles);\n\n      for (const prop in builtStyles) {\n        if (builtStyles.hasOwnProperty(prop)) {\n          wrapper.style[prop] = set ? builtStyles[prop] : '';\n        }\n      }\n\n      // Prevent any horizontal scroll.\n      // Only set overflow-x as an inline style if htmlClassName or\n      // bodyClassName is not passed in. Otherwise, it is up to the caller to\n      // decide if they want to set the overflow style in CSS using the custom\n      // class names.\n      const applyOverflow = el => (el.style['overflow-x'] = set ? 'hidden' : '');\n      if (!this.props.htmlClassName) {\n        applyOverflow(document.querySelector('html'));\n      }\n      if (!this.props.bodyClassName) {\n        applyOverflow(document.querySelector('body'));\n      }\n    }\n\n    // Builds styles incrementally for a given element.\n    getStyles(el, index, inline) {\n      const propName = 'bm' + el.replace(el.charAt(0), el.charAt(0).toUpperCase());\n\n      // Set base styles.\n      let output = baseStyles[el] ? this.getStyle(baseStyles[el]) : {};\n\n      // Add animation-specific styles.\n      if (styles[el]) {\n        output = {\n          ...output,\n          ...this.getStyle(styles[el], index + 1)\n        };\n      }\n\n      // Add custom styles.\n      if (this.props.styles[propName]) {\n        output = {\n          ...output,\n          ...this.props.styles[propName]\n        };\n      }\n\n      // Add element inline styles.\n      if (inline) {\n        output = {\n          ...output,\n          ...inline\n        };\n      }\n\n      // Remove transition if required\n      // (useful if rendering open initially).\n      if (this.props.noTransition) {\n        delete output.transition;\n      }\n\n      return output;\n    }\n\n    getStyle(style, index) {\n      const { width } = this.props;\n      const formattedWidth = typeof width !== 'string' ? `${width}px` : width;\n      return style(this.state.isOpen, formattedWidth, this.props.right, index);\n    }\n\n    listenForClose(e) {\n      e = e || window.event;\n\n      // Close on ESC, unless disabled\n      if (!this.props.disableCloseOnEsc && this.state.isOpen && (e.key === 'Escape' || e.keyCode === 27)) {\n        this.toggleMenu();\n      }\n    }\n\n    shouldDisableOverlayClick() {\n      if (typeof this.props.disableOverlayClick === 'function') {\n        return this.props.disableOverlayClick();\n      } else {\n        return this.props.disableOverlayClick;\n      }\n    }\n\n    componentDidMount() {\n      // Bind ESC key handler (unless custom function supplied).\n      if (this.props.customOnKeyDown) {\n        window.onkeydown = this.props.customOnKeyDown;\n      } else {\n        window.onkeydown = this.listenForClose.bind(this);\n      }\n\n      // Allow initial open state to be set by props.\n      if (this.props.isOpen) {\n        this.toggleMenu({ isOpen: true, noStateChange: true });\n      }\n    }\n\n    componentWillUnmount() {\n      window.onkeydown = null;\n\n      this.applyWrapperStyles(false);\n    }\n\n    componentDidUpdate(prevProps) {\n      const wasToggled =\n        typeof this.props.isOpen !== 'undefined' && this.props.isOpen !== this.state.isOpen && this.props.isOpen !== prevProps.isOpen;\n      if (wasToggled) {\n        this.toggleMenu();\n        // Toggling changes SVG animation requirements, so we defer these until the next componentDidUpdate\n        return;\n      }\n\n      if (styles.svg) {\n        const morphShape = ReactDOM.findDOMNode(this, 'bm-morph-shape');\n        const path = styles.svg.lib(morphShape).select('path');\n\n        if (this.state.isOpen) {\n          // Animate SVG path.\n          styles.svg.animate(path);\n        } else {\n          // Reset path (timeout ensures animation happens off screen).\n          setTimeout(() => {\n            path.attr('d', styles.svg.pathInitial);\n          }, 300);\n        }\n      }\n    }\n\n    render() {\n      return (\n        <div>\n          {!this.props.noOverlay && (\n            <div\n              className={`bm-overlay ${this.props.overlayClassName}`.trim()}\n              onClick={() => !this.shouldDisableOverlayClick() && this.toggleMenu()}\n              style={this.getStyles('overlay')}\n            />\n          )}\n          <div id={this.props.id} className={`bm-menu-wrap ${this.props.className}`.trim()} style={this.getStyles('menuWrap')}>\n            {styles.svg && (\n              <div className={`bm-morph-shape ${this.props.morphShapeClassName}`.trim()} style={this.getStyles('morphShape')}>\n                <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 800\" preserveAspectRatio=\"none\">\n                  <path d={styles.svg.pathInitial} />\n                </svg>\n              </div>\n            )}\n            <div className={`bm-menu ${this.props.menuClassName}`.trim()} style={this.getStyles('menu')}>\n              <nav className={`bm-item-list ${this.props.itemListClassName}`.trim()} style={this.getStyles('itemList')}>\n                {React.Children.map(this.props.children, (item, index) => {\n                  if (item) {\n                    const classList = ['bm-item', this.props.itemClassName, item.props.className]\n                      .filter(className => !!className)\n                      .join(' ');\n                    const extraProps = {\n                      key: index,\n                      className: classList,\n                      style: this.getStyles('item', index, item.props.style),\n                      tabIndex: this.state.isOpen ? 0 : -1\n                    };\n                    return React.cloneElement(item, extraProps);\n                  }\n                })}\n              </nav>\n            </div>\n            {this.props.customCrossIcon !== false && (\n              <div style={this.getStyles('closeButton')}>\n                <CrossIcon\n                  onClick={() => this.toggleMenu()}\n                  styles={this.props.styles}\n                  customIcon={this.props.customCrossIcon}\n                  className={this.props.crossButtonClassName}\n                  crossClassName={this.props.crossClassName}\n                  tabIndex={this.state.isOpen ? 0 : -1}\n                />\n              </div>\n            )}\n          </div>\n          {this.props.customBurgerIcon !== false && (\n            <div style={this.getStyles('burgerIcon')}>\n              <BurgerIcon\n                onClick={() => this.toggleMenu()}\n                styles={this.props.styles}\n                customIcon={this.props.customBurgerIcon}\n                className={this.props.burgerButtonClassName}\n                barClassName={this.props.burgerBarClassName}\n                onIconStateChange={this.props.onIconStateChange}\n              />\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  Menu.propTypes = {\n    bodyClassName: PropTypes.string,\n    burgerBarClassName: PropTypes.string,\n    burgerButtonClassName: PropTypes.string,\n    className: PropTypes.string,\n    crossButtonClassName: PropTypes.string,\n    crossClassName: PropTypes.string,\n    customBurgerIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    customCrossIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    customOnKeyDown: PropTypes.func,\n    disableAutoFocus: PropTypes.bool,\n    disableCloseOnEsc: PropTypes.bool,\n    disableOverlayClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    htmlClassName: PropTypes.string,\n    id: PropTypes.string,\n    isOpen: PropTypes.bool,\n    itemClassName: PropTypes.string,\n    itemListClassName: PropTypes.string,\n    menuClassName: PropTypes.string,\n    morphShapeClassName: PropTypes.string,\n    noOverlay: PropTypes.bool,\n    noTransition: PropTypes.bool,\n    onStateChange: PropTypes.func,\n    outerContainerId: styles && styles.outerContainer ? PropTypes.string.isRequired : PropTypes.string,\n    overlayClassName: PropTypes.string,\n    pageWrapId: styles && styles.pageWrap ? PropTypes.string.isRequired : PropTypes.string,\n    right: PropTypes.bool,\n    styles: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    onIconHoverChange: PropTypes.func\n  };\n\n  Menu.defaultProps = {\n    bodyClassName: '',\n    burgerBarClassName: '',\n    burgerButtonClassName: '',\n    className: '',\n    crossButtonClassName: '',\n    crossClassName: '',\n    disableAutoFocus: false,\n    disableCloseOnEsc: false,\n    htmlClassName: '',\n    id: '',\n    itemClassName: '',\n    itemListClassName: '',\n    menuClassName: '',\n    morphShapeClassName: '',\n    noOverlay: false,\n    noTransition: false,\n    onStateChange: () => {},\n    outerContainerId: '',\n    overlayClassName: '',\n    pageWrapId: '',\n    styles: {},\n    width: 300,\n    onIconHoverChange: () => {}\n  };\n\n  return Menu;\n};\n"]},"metadata":{},"sourceType":"module"}